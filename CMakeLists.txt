PROJECT(dense-multicut LANGUAGES CXX)    
cmake_minimum_required(VERSION 3.2)    

include_directories(external/CLI11/include)
include_directories(include)

add_library(dense-multicut INTERFACE)
target_include_directories(dense-multicut INTERFACE include/)    
target_compile_features(dense-multicut INTERFACE cxx_std_17)
target_compile_options(dense-multicut INTERFACE -fPIC)
find_package(OpenMP)
if(OpenMP_CXX_FOUND)
    message("Compile with OpenMP")
    target_link_libraries(dense-multicut INTERFACE OpenMP::OpenMP_CXX)
else()
    message("No OpenMP found")
endif()

# Flags from HNSW lib:
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    SET( CMAKE_CXX_FLAGS  "-Ofast -DHAVE_CXX0X -openmp -march=native -fpic -ftree-vectorize")
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    SET( CMAKE_CXX_FLAGS  "-Ofast -lrt -DHAVE_CXX0X -march=native -fpic -w -fopenmp -ftree-vectorize -ftree-vectorizer-verbose=0" )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    SET( CMAKE_CXX_FLAGS  "-Ofast -lrt -DHAVE_CXX0X -openmp -march=native -fpic -w -fopenmp -ftree-vectorize" )
endif()

option(FAISS_ENABLE_GPU "" OFF)
if(FAISS_ENABLE_GPU)
    add_definitions(-DFAISS_ENABLE_GPU)
endif()
set(CMAKE_CUDA_ARCHITECTURES OFF)
option(FAISS_ENABLE_PYTHON "" OFF)
option(BUILD_TESTING "" OFF)
add_subdirectory(external/faiss)
target_include_directories(dense-multicut INTERFACE external/faiss)
target_include_directories(dense-multicut INTERFACE external/hnswlib)
set(PYBIND11_INSTALL ON CACHE BOOL "enable pybind11 bindings.")
set(PYBIND11_CPP_STANDARD -std=c++17)
add_subdirectory(external/pybind11)
add_subdirectory(src)
#add_subdirectory(test)
